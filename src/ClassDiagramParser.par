/~ Class Diagram Grammar ~/

[*

    var parsedAttributes = [];
    var parsedConstant;
    var parsedMulti;
    var parsedProperties = { };

*]

!   '[ \t\r]'
    ;


    'assoc'
    'class'
    'extends'
    'has'
    'implements'
    'nav-to'
    'owns'
    'to'
    'uses'
    '\('
    '\)'
    ','
    '\n'
    '--'
    '='
    '\.\.'
    '\*'
    '[0-9]+'                        DIGITS
    '[A-Za-z_][A-Za-z0-9_]*'        IDENT
    '[-\+#][^\n]*'                  MEMBER
    ;

##

stmt-list           : stmt-list stmt
                    |
                    ;

stmt                : class-def
                    | assoc-def
                    | '\n'
                    ;

class-def           : 'class' IDENT '\n' properties attrs-ops

[*
    var currentClass = parsedClassDiagram.class(%2, 0, 0);

    for (var i = 0; i < parsedAttributes.length; i++) {
        currentClass.attribute(parsedAttributes[i]);
    }

    for (var key in parsedProperties) {
        currentClass[key] = parsedProperties[key];
    }

    parsedAttributes = [];
*]
                    ;

properties          : '(' property-list ')' '\n'
                    |
                    ;

property-list       : property-list ',' property
                    | property
                    ;

property            : IDENT '=' constant                        [* parsedProperties[%1] = parsedConstant; *]
                    ;

constant            : DIGITS                                    [* parsedConstant = Number(%1); *]
                    ;

attrs-ops           : '--' '\n' attr-list
                    | '--' '\n' attr-list '--' '\n' op-list
                    |
                    ;

attr-list           : attr-list attr
                    |
                    ;

attr                : MEMBER '\n'                               [* parsedAttributes.push(%1); *]
                    ;

op-list             : op-list op
                    |
                    ;

op                  : MEMBER '\n'
                    ;

assoc-def           : 'assoc' end-point assoc-type end-point '\n'
                    ;

end-point           : IDENT multi
                    ;

multi               : '(' DIGITS ')'                            [* parsedMulti = %2; *]
                    | '(' DIGITS '..' DIGITS ')'                [* parsedMulti = %2 + %3 + %4; *]
                    | '(' DIGITS '..' '*' ')'                   [* parsedMulti = %2 + %3 + %4; *]
                    |                                           [* parsedMulti = null; *]
                    ;

assoc-type          : 'extends'
                    | 'has'
                    | 'implements'
                    | 'nav-to'
                    | 'owns'
                    | 'to'
                    | 'uses'
                    ;





